COMPILER488(1)              General Commands Manual             COMPILER488(1)



[1mNAME[0m
       compiler488 - a compiler for the CSC 488S Project Language

[1mSYNOPSIS[0m
       [1mcompiler488  [22m[ [1m-X [22m] [ [1m-D[22m[[4mabxy[24m] ] [ [1m-T[22m[[4macilpsxy[24m] ] [ [1m-O [4m[22moutputFilename[24m ]
       [ [1m-E [4m[22merrorFilename[24m ] [ [1m-R [4m[22mtraceFilename[24m ] [ [1m-U [4m[22mdumpFilename[24m ] [ [1m-I [4m[22mrun-[0m
       [4mInputFilename[24m ] [ [4msourceFile[24m ]

[1mDESCRIPTION[0m
       [1mcompiler488 [22mis an incredibly well designed and implemented compiler for
       the CSC488S Course Project Language.

       The compiler compiles and then attempts to execute one program  written
       in the CSC488S Project Language.  The compiler reads the source program
       from [4msourceFile[24m if it was specified in the  command  that  invoked  the
       compiler.  Otherwise it exepcts the source program on standard input.

[1mOPTIONS[0m
       The options currently implemented by the compiler488 are:

       [1m-X          [22mSuppress  execution  of  the  compiled program.  Saves time
                   when testing an incomplete code generator.

       [1m-D          [22mSpecify dump options.   The  letters  [4mabxy[24m  indicate  which
                   information should be dumped to the compilers [4mdumpFile[24m.
                   [4ma[24m  -  dump  Abstract  Syntax  Tree  after  Pass 1  [4mb[24m - dump
                   Abstract Syntax Tree after Pass 2  [4mx[24m -  dump  the  compiled
                   code  just before execution  [4my[24m - dump symbol table informa-
                   tion

       [1m-T          [22mSpecify trace options.  The letters [4macilpsxy[24m indicate which
                   trace information should be written to the compilers [4mtrace-[0m
                   [4mFile[24m.
                   [4ma[24m - trace Abstract Syntax Tree operations  [4mc[24m -  trace  code
                   generation   [4mi[24m - trace source program input in the scanner
                   [4ml[24m - trace tokens in lexical analysis  [4mp[24m - trace parsing   [4ms[0m
                   - trace semantic analysis  [4mx[24m - trace program execution  [4my[24m -
                   trace symbol table operations

       [1m-E   [4m[22merrorFile[0m
                   Specify an alternative file to receive error messages  gen-
                   erated  by  the  compiler.   Default  for error messages is
                   stderr.

       [1m-O   [4m[22moutputFileName[0m
                   Specify an alternative file to  receive  ordinary  compiler
                   output  (includes  compilation  and execution). Default for
                   compiler output is stdout.

       [1m-R   [4m[22mtraceFileName[0m
                   Specify an  alternative  file  to  receive  compiler  trace
                   informantion.  Default for trace information is stdout.

       [1m-U   [4m[22mdumpFileName[0m
                   Specify an alternative file to receive compiler dump infor-
                   mation.  Default for dump information is stdout.

       [1m-I   [4m[22mrunInputFileName[0m
                   Specify an alternative file to serve as a source  of  input
                   during execution of the compiled program.  Default for exe-
                   cution time input is stdin.

[1mENVIRONMENT[0m
       The compiler does not use any Unix environment variables.

[1mSEE ALSO[0m
       The CSC488S course news group ut.cdf.csc488h

[1mAUTHORS[0m
       The [1mcompiler488 [22mskeleton was conceived and implemented by Profs.  David
       B.  Wortman  (machine  interpreter  and  general  structure) and Marsha
       Chechik (scanner).

       Parse tree creation, semantic analysis, code generation and the  symbol
       table  mechanisms  were skillfully designed and implemented by [1mPUT YOUR[0m
       [1mNAMES HERE[0m

[1mBUGS[0m
       There are none; only a few unexpected features.



CSC488S Compiler                4 February 1999                 COMPILER488(1)
