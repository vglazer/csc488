% Test productions pertaining to arithmetic operators
% Key Declarations Involved:
%      %left '+' '-'
%      %left '*' '/'
%      %right UMINUS
% Key Productions Involved:
%     expression:    INTCONST
%                    '-' expression
%                    expression '+' expression
%                    expression '-' expression
%                    expression '*' expression
%                    expression '/' expression
{
    % variable declaration
    int a int b int c int d int e int f int g int h int k

    % variable initialisation
    a = 2 b = 5

    % check operation correctness, including associativity
    c = a + b + 1  % c = 8
    d = a - 2 - b  % d = -5
    e = -d         % e = 5
    f = a * d * 2  % f = -20
    g = 25 / b / a % g = 2 (integer division)

    % output values of c, d, e, f, g
    put "b = ", b, "; c = ", c, "; d = ", d, "; e = ", e, 
        "; f = ", f, "; g = ", g, skip
 
    % check precedence; ensure brackets override default precedence
    h = f + d * g / -3   % h = -17
    k = (f + d * g) / -3 % k = 10

    % output values of h, k
    put "h = ", h, "; k = ", k, skip
}
% Test productions pertaining to arrays
% Key Productions Involved: 
%    declaration:    type IDENT '[' INTCONST ']'
%       variable:    IDENT '[' expression ']'
{
   % variable declaration
   int array[32767]

   % variable initialization 
   array[0] = 2 array[32766] = -32767

   % array use
   if array[32766] < array[0] then
      put "success"
   else
      put "failure"
   fi
}
% Test productions pertaining to boolean operators
% Key Declarations Involved:
%    %left '|' 
%    %left '&'
%    %right '!'
% Key Productions Involved:
%    declaration:    type IDENT
%      statement:    variable '=' expression
%           type:    INT | BOOL ;
%     expression:    TTRUE
%                    TFALSE
%                    '!' expression
%                    expression '&' expression
%                    expression '|' expression
%                    expression '(' expression ')'
%                    '(' expression '?' expression ':' expression ')'
{  
    % variable declaration
    boolean a boolean b boolean c boolean d boolean e boolean f
    int C int D int E int F

    % variable initialisation
    a = true b = false

    % check operation correctness, including associativity
    c = a & true & b  % c = false
    d = a | b | false % d = true
    e = !b            % e = true

    % check precedence; 
    f = (c | d & !e) % f = false

    % assign a value of 1 to each int whose corresponding
    % boolean is true, and a value of 0 to other ints
    C = (c ? 1 : 0) D = (d ? 1 : 0) E = (e ? 1 : 0) F = (f ? 1 : 0)

    % output variable values for C, D, E and F
    put "C = ", C, "; D = ", D, "; E = ", E, "; F = ", F, skip
}
% Test productions pertaining to control flow and comparison/equality operators
% Key Rules Used: 
%      statement:    'if' expression 'then' statement 'fi'
%                    'if' expression 'then' statement 'else' statement 'fi'
%     expression:    expression '=' expression
%                    expression '#' expression 
%                    expression '<' expression
%                    expression '<' '=' expression       
%                    expression '>' expression
%                    expression '>' '=' expression
{
    % variable declaration
    int i int j int k int l

    % variable initialisation
    i = 1 j = 5 k = -1 l = 4

    % single if, no else, = and #
    if i = k then
        put "i = k", skip
    fi

    if i # k then
        put "i # k", skip
    fi

    % nested ifs with elses, <= and <
    if i <= j then
        if i < j then
            put "i < j", skip
        else    
            put "i = j", skip
        fi
    else
        put "i > j", skip
    fi

    % more nested ifs with elses, >= and >
    if l >= k then
        if l > k then
            put "k < l", skip
        else    
            put "k = l", skip
        fi
    else
        put "k > l", skip
    fi
}
 
% Verify that no declarations can follow a statement [ parse error expected ]
% Key Productions Involved:
% program:  scope ;
%
% scope:  '{' declaration_list statement_list '}'  
%	|	'{' statement_list  '}'
%	;
{
    % variable declaration and initialisation
    int a
    a = 5
    int b
}
% Verify that = is not associative [ parse error expected ]
% Key Declarations Involved:     
%     %nonassoc '='
% Key Productions Involved:  
%     expression: expression '=' expression
{
    % variable declaration and initialisation
    boolean a boolean b boolean c
    b = true c = false
    
    % The next line should result in a parse error, since "a = b = c" is 
    % not a valid expression 
    if a = b = c then 
        put "This line never printed", skip
    fi
}
% Verify that a = b = c is a valid _statement_
% Key Productions Involved:
%     statement:  variable '=' expression  
%     expression: expression '=' expression
{
    % variable declaration and initialisation
    boolean a boolean b boolean c
    b = true c = false
    
    % Here the first = is parsed as assignment and the second as equality
    a = b = c
}
% Test productions pertaining to functions and procedures
% Key Productions Involved:
%     statement:   RESULT expression
%                  IDENT '(' arguments ')'
%                  IDENT
%   declaration:   type IDENT '(' parameters ')' ':' scope
%                  type IDENT ':' scope
%                  PROC IDENT '(' parameters ')' ':' scope
%                  PROC IDENT : scope
%
%     arguments:  arguments ',' expression 
%	      |       expression
%	      ;
%
%     parameters:  parameters  ',' type IDENT  
%         |        type IDENT
%	      ;
%
%     expression: IDENT '(' arguments ')' 
%                 IDENT
{
	% return a mod b
	int mod ( int a, int b) :
	{
		result a - (a / b) * b
	}

    % return 1 ("true") if 2 | 4, 0 ("false") otherwise
    int two_divides_four :
    {
        if mod(4, 2) = 0 then
            result 1
        else 
            result 0
        fi   
    }

    % output parity of integers between 1 and 7 (declaration)
    proc parity : {
        % declare local variables
        int n 
        int q 
        
        n = 1
        while n <= 10 do
            q = n / 2                
            if q * 2 = n then
                put "even: ", n, skip
            else 
                put "odd: ", n, skip
            fi 
            n = n + 1

            % skip 7, 9 and 10
            if n = 8 then
                return
            fi
        od
    }

	% print test result 
	proc test_result (int reslt, int expected) :
	{
		if reslt = expected then
			put "correct", skip
		else 
			put "incorrect", skip
		fi
	}

	% variable declaration
	int x int y

	% variable initialization	
	x = 10 y = 7

    % call procedure (with no parameters)
    parity

    % call function (with no parameters) -- note that two_divides_four is 
    % treated as an integer expression here
    put two_divides_four, skip
	 
    % call procedure and function (with parameters)
	test_result(mod(x + y, 3), 2) 
	test_result(mod(x + y, 18), 17)
}
% Verify that > is not associative [ parse error expected ]
% Declarations Involved:     
%     %nonassoc '>'
% Key Productions Involved:  
%     expression: expression '>' expression
{
    % variable declaration and initialisation
    int a int b int c
    b = 5 c = 20
    
    % The next line should result in a parse error, since "a > b > c" is 
    % not a valid expression 
    if a > b > c then 
        put "This line never printed", skip
    fi
}    
% Verify that >= is not associative [ parse error expected ]
% Declarations Involved:     
%     %nonassoc GTE
% Key Productions Involved:  
%     expression: expression '>' '=' expression
{
    % variable declaration and initialisation
    int a int b int c
    b = 5 c = 20
    
    % The next line should result in a parse error, since "a >= b >= c" is 
    % not a valid expression 
    if a >= b >= c then 
        put "This line never printed", skip
    fi
}    
% Test productions pertaining to input and output
% Key Productions Involved:
%     statement:    GET input
%     outputlist: outputlist ',' output
%          |   output
%          ;
% 
%     output:  expression 
%	       |   TEXTCONST 
%	       |   SKIP 
%          ;
%
%     input:   input ',' variable
%         |    variable
{	
	% variable declaration
	int digits int n

	% get integers from user (note the use of get to input 
    % two variables at once)
	put "Enter two integers: ", skip
	get n, m 

    put "The second integers was ", m, skip

	digits = 0
	do 
	    n = n / 10
		digits = digits + 1
	until n = 0

    % note that digits + 0  is an expression
	put "The number has ", digits + 0, " digit(s)", skip
}
% Test productions pertaining to loop constructs
% Key Productions Involved:
%     statement_list:  statement_list statement
%         | statement
%         ;
% 
%     statement:    WHILE expression DO statement_list OD
%                   DO statement_list UNTIL expression
%                   EXIT
{
   % variable declaration
   int i int j

   % variable initialization
   i = 0

   % nested loops
   while true do
     if i > 10 then
        exit
     fi
     j = 0
     do
        i = i + 1 
        j = j + 1
     until j >= 3
   od 
   put "i = ", i
}
% Verify that < is not associative [ parse error expected ]
% Declarations Involved:     
%     %nonassoc '<'
% Key Productions Involved:  
%     expression: expression '<' expression
{
    % variable declaration and initialisation
    int a int b int c
    b = 5 c = 20
    
    % The next line should result in a parse error, since "a < b < c" is 
    % not a valid expression 
    if a < b < c then 
        put "This line never printed", skip
    fi
}    
% Verify that <= is not associative [ parse error expected ]
% Declarations Involved:     
%     %nonassoc LTE
% Key Productions Involved:  
%     expression: expression '<' '=' expression
{
    % variable declaration and initialisation
    int a int b int c
    b = 5 c = 20
    
    % The next line should result in a parse error, since "a <= b <= c" is 
    % not a valid expression 
    if a <= b <= c then 
        put "This line never printed", skip
    fi
}    
% Verify that # is not associative [ parse error expected ]
% Declarations Involved:     
%     %nonassoc '#'
% Key Productions Involved:  
%     expression: expression '#' expression
{
    % variable declaration and initialisation
    boolean a boolean b boolean c
    b = true c = false
    
    % The next line should result in a parse error, since "a # b # c" is 
    % not a valid expression 
    if a # b # c then 
        put "This line never printed", skip
    fi
}    
