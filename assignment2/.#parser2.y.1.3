%{
/************************************************************************/
/*									                                    */
/*	parser.y							                                */
/*	This is the parser for the 488S course project.                     */
/************************************************************************/

static char parseVersion[] = 
		"$Id: parser2.y,v 1.3 2003/02/02 18:31:57 g0glavic Exp $" ;	


/************************************************************************/
/*	Definitions common to all modules in the compiler		            */
/************************************************************************/

#include "common.h"

/************************************************************************/
/*	Global variables 						                            */
/************************************************************************/

#include "globalvars.h"

extern int yylex();             /* lexical analysis     */

/************************************************************************/
/*     Functions introduced in this file                                */
/************************************************************************/

void yyerror(char* message);   /* how to report errors */


%}
%union {int number;
	tokentype token;
        }

/************************************************************************/
/*	Symbolic names for lexical tokens				*/
/************************************************************************/

%token  IDENT	INTCONST	TEXTCONST
%token	BOOL	DO	ELSE	EXIT	FI
%token	GET	IF	INT	OD
%token	PROC	PUT	SKIP 	RESULT
%token	RETURN 	THEN	TFALSE	TTRUE	
%token	UNTIL	WHILE

%left '!'
%left '|' 
%left '&'
%nonassoc '=' '#' '<' '>' 
%left '+' '-'
%left '*' '/'
%right unary_minus

%start program

%%

/************************************************************************/
/*									                                    */
/*									                                    */
/*	YOUR INCREDIBLY CLEVER GRAMMAR FOR THE PROJECT LANGUAGE		        */
/*									                                    */
/*	GOES HERE							                                */
/*									                                    */
/************************************************************************/


program:  scope 
	;

scope:  '{' declaration_list statement '}'  
	|	'{'  statement  '}'
	;

declaration_list: declaration_list declaration
    |   declaration
    ;

declaration:  type IDENT  
	|	type  IDENT '['  INTCONST  ']' 
	|	type IDENT ':'  scope 
	|	type IDENT '('  parameters  ')'  ':' scope 
	|	PROC IDENT  ':' scope  
	|	PROC IDENT '(' parameters ')' ':' scope 
	;

statement:  variable  '='  expression 
	|	IF expression  THEN statement FI 
	|	IF expression  THEN statement  ELSE statement  FI 
	|	WHILE expression DO statement OD 
	|	DO statement UNTIL expression 
	|	EXIT 
	|	RETURN 
	|	RESULT expression 
	|	PUT outputlist
	|	GET input 
	|	procedurename  
	|	procedurename  '('  arguments  ')' 
	|	scope  
	|	statement statement 
	; 

outputlist: outputlist ',' output
    |   output
    ;

output:  expression 
	|	TEXTCONST 
	|	SKIP 
	;

input:  input ',' variable
    |   variable
    ;

type:  INT 
	|	BOOL 
	;

arguments:  arguments ',' expression 
	|	expression
	;

parameters:  parameters  ',' type IDENT  
    |   type IDENT 
	;

variable:  variablename 
	|	arrayname  '['  expression  ']' 
	;

expression:  INTCONST 
	|	'-'  expression %prec unary_minus 
	|	expression  '+'  expression 
	|	expression  '-'  expression 
	|	expression  '*'  expression 
	|	expression  '/'  expression 
	|	TTRUE 
	|	TFALSE 
	|	expression '!'  expression 
	|	expression '&'  expression 
	|	expression '|'  expression 
	|	expression '=' expression 
	|	expression '#' expression 
	|	expression '<'  expression 
	|	expression '<' '='  expression 
	|	expression '>'  expression 
	|	expression '>'  '='  expression 
	|	'('  expression  ')'  
	|	'('  expression  '?' expression ':' expression  ')'  
	|	variable 
	|	functionname  
	|	functionname  '('  arguments  ')'  
	|	parametername 
	;

variablename:  IDENT
	;

arrayname:  IDENT 
	;

functionname:  IDENT
	;

procedurename:  IDENT 
	;

parametername: IDENT 
	;

%%

/************************************************************************/
/*     Functions to print error messages                                */
/************************************************************************/

void yyerror(char* message) {
        fprintf(errorFile,"Parse error (line %d) - %s\n", line , message );
}
