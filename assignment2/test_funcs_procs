% Test productions pertaining to functions and procedures
% Key Productions Involved:
%     statement:   RESULT expression
%                  IDENT '(' arguments ')'
%                  IDENT
%   declaration:   type IDENT '(' parameters ')' ':' scope
%                  type IDENT ':' scope
%                  PROC IDENT '(' parameters ')' ':' scope
%                  PROC IDENT : scope
%
%     arguments:  arguments ',' expression 
%	      |       expression
%	      ;
%
%     parameters:  parameters  ',' type IDENT  
%         |        type IDENT
%	      ;
%
%     expression: IDENT '(' arguments ')' 
%                 IDENT
{
	% return a mod b
	int mod ( int a, int b) :
	{
		result a - (a / b) * b
	}

    % return 1 ("true") if 2 | 4, 0 ("false") otherwise
    int two_divides_four :
    {
        if mod(4, 2) = 0 then
            result 1
        else 
            result 0
        fi   
    }

    % output parity of integers between 1 and 7 (declaration)
    proc parity : {
        % declare local variables
        int n 
        int q 
        
        n = 1
        while n <= 10 do
            q = n / 2                
            if q * 2 = n then
                put "even: ", n, skip
            else 
                put "odd: ", n, skip
            fi 
            n = n + 1

            % skip 7, 9 and 10
            if n = 8 then
                return
            fi
        od
    }

	% print test result 
	proc test_result (int reslt, int expected) :
	{
		if reslt = expected then
			put "correct", skip
		else 
			put "incorrect", skip
		fi
	}

	% variable declaration
	int x int y

	% variable initialization	
	x = 10 y = 7

    % call procedure (with no parameters)
    parity

    % call function (with no parameters) -- note that two_divides_four is 
    % treated as an integer expression here
    put two_divides_four, skip
	 
    % call procedure and function (with parameters)
	test_result(mod(x + y, 3), 2) 
	test_result(mod(x + y, 18), 17)
}
